// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: services/user.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_AddGroupToUser_FullMethodName                      = "/services.UserService/AddGroupToUser"
	UserService_RemoveGroupFromUser_FullMethodName                 = "/services.UserService/RemoveGroupFromUser"
	UserService_GetAllUserGroupsAndUpdateTotalScore_FullMethodName = "/services.UserService/GetAllUserGroupsAndUpdateTotalScore"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	AddGroupToUser(ctx context.Context, in *AddGroupToUserRequest, opts ...grpc.CallOption) (*AddGroupToUserResponse, error)
	RemoveGroupFromUser(ctx context.Context, in *RemoveGroupFromUserRequest, opts ...grpc.CallOption) (*RemoveGroupFromUserResponse, error)
	GetAllUserGroupsAndUpdateTotalScore(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*UserNameResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddGroupToUser(ctx context.Context, in *AddGroupToUserRequest, opts ...grpc.CallOption) (*AddGroupToUserResponse, error) {
	out := new(AddGroupToUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddGroupToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveGroupFromUser(ctx context.Context, in *RemoveGroupFromUserRequest, opts ...grpc.CallOption) (*RemoveGroupFromUserResponse, error) {
	out := new(RemoveGroupFromUserResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveGroupFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserGroupsAndUpdateTotalScore(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*UserNameResponse, error) {
	out := new(UserNameResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllUserGroupsAndUpdateTotalScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	AddGroupToUser(context.Context, *AddGroupToUserRequest) (*AddGroupToUserResponse, error)
	RemoveGroupFromUser(context.Context, *RemoveGroupFromUserRequest) (*RemoveGroupFromUserResponse, error)
	GetAllUserGroupsAndUpdateTotalScore(context.Context, *UserNameRequest) (*UserNameResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddGroupToUser(context.Context, *AddGroupToUserRequest) (*AddGroupToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupToUser not implemented")
}
func (UnimplementedUserServiceServer) RemoveGroupFromUser(context.Context, *RemoveGroupFromUserRequest) (*RemoveGroupFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupFromUser not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserGroupsAndUpdateTotalScore(context.Context, *UserNameRequest) (*UserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserGroupsAndUpdateTotalScore not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddGroupToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddGroupToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddGroupToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddGroupToUser(ctx, req.(*AddGroupToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveGroupFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveGroupFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveGroupFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveGroupFromUser(ctx, req.(*RemoveGroupFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserGroupsAndUpdateTotalScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserGroupsAndUpdateTotalScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserGroupsAndUpdateTotalScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserGroupsAndUpdateTotalScore(ctx, req.(*UserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroupToUser",
			Handler:    _UserService_AddGroupToUser_Handler,
		},
		{
			MethodName: "RemoveGroupFromUser",
			Handler:    _UserService_RemoveGroupFromUser_Handler,
		},
		{
			MethodName: "GetAllUserGroupsAndUpdateTotalScore",
			Handler:    _UserService_GetAllUserGroupsAndUpdateTotalScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/user.proto",
}
